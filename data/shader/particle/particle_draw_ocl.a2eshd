<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<options># lit lit_pp</options>

	<vertex_shader>
uniform float living_time;
in vec4 in_vertex;
in vec4 in_aux;
out vec4 vs_aux;

void main() {
	// w < 1: will be culled in the geometry shader
	gl_Position = vec4(in_vertex.xyz,
					   (in_vertex.w <= 0.0 || in_vertex.w > living_time) ? 0.0 : 1.0);
	vs_aux = in_aux;
}
	</vertex_shader>

	<geometry_shader>
layout(points) in;
layout(triangle_strip, max_vertices = 4) out;

uniform vec2 size;
uniform mat4 mvm;
uniform mat4 mvpm;
uniform vec3 position;

<option match="lit lit_pp">
#define MAX_LIGHTS 4 // has to be changed in the fs too
layout(std140) uniform light_buffer {
	// note: pos is packed with radius^2 and color with 1/radius^2
	struct {
		vec4 position;
		vec4 color;
	} data[MAX_LIGHTS];
} lights;

<option match="lit">
flat out float attenuation[MAX_LIGHTS];
</option>
<option match="lit_pp">
centroid out float attenuation[MAX_LIGHTS];
</option>

float compute_attenuation(vec3 pos) {
	float total_attenuation = 0.0;
	// this will hopefully be unrolled
	for(int i = 0; i < MAX_LIGHTS; i++) {
		vec3 light_dir = (lights.data[i].position.xyz - pos);
		light_dir *= lights.data[i].color.w;
		// attenutation = distance / light_radius^4
		attenuation[i] = max(1.0 - dot(light_dir, light_dir) * lights.data[i].position.w, 0.0);
		total_attenuation += attenuation[i];
	}
	return total_attenuation;
}
</option>

in vec4 vs_aux[];
out vec4 out_aux;

out vec2 tex_coord;
centroid out vec4 out_position;

void main() {
	vec4 in_pos = gl_in[0].gl_Position;
	if(in_pos.w < 1.0) return; // discard particle
	
	vec3 right = -vec3(mvm[0][0], mvm[1][0], mvm[2][0]);
	vec3 up = vec3(mvm[0][1], mvm[1][1], mvm[2][1]);
	
	right *= 0.5 * size.x;
	up *= 0.5 * size.y;
	in_pos.xyz += position;
	
	<option match="lit">
	float total_attenuation = compute_attenuation(in_pos.xyz);
	if(total_attenuation == 0.0) return;
	</option>
	
	out_aux = vs_aux[0]; // note: this is the same for all!
	
	////////////////////////////
	// v0
	tex_coord = vec2(0.0, 0.0);
	vec4 pos = in_pos + vec4(-right - up, 0.0);
	<option match="lit_pp">
	compute_attenuation(pos.xyz);
	</option>
	pos = mvpm * pos;
	gl_Position = pos;
	out_position = pos;
	EmitVertex();
	
	////////////////////////////
	// v1
	tex_coord = vec2(1.0, 0.0);
	pos = in_pos + vec4(-right + up, 0.0);
	<option match="lit_pp">
	compute_attenuation(pos.xyz);
	</option>
	pos = mvpm * pos;
	gl_Position = pos;
	out_position = pos;
	EmitVertex();
	
	////////////////////////////
	// v2
	tex_coord = vec2(0.0, 1.0);
	pos = in_pos + vec4(right - up, 0.0);
	<option match="lit_pp">
	compute_attenuation(pos.xyz);
	</option>
	pos = mvpm * pos;
	gl_Position = pos;
	out_position = pos;
	EmitVertex();
	
	////////////////////////////
	// v3
	tex_coord = vec2(1.0, 1.0);
	pos = in_pos + vec4(right + up, 0.0);
	<option match="lit_pp">
	compute_attenuation(pos.xyz);
	</option>
	pos = mvpm * pos;
	gl_Position = pos;
	out_position = pos;
	EmitVertex();
	
	EndPrimitive();
}
	</geometry_shader>
	
	<fragment_shader>
uniform sampler2D particle_tex;
uniform sampler2D depth_buffer;
uniform vec4 color;
uniform vec2 projection_ab;
in vec2 tex_coord;
centroid in vec4 out_position;
out vec4 frag_color;

<option match="lit lit_pp">
#define MAX_LIGHTS 4 // has to be changed in the gs too
layout(std140) uniform light_buffer {
	// note: pos is packed with radius^2 and color with 1/radius^2
	struct {
		vec4 position;
		vec4 color;
	} data[MAX_LIGHTS];
} lights;

<option match="lit">
flat in float attenuation[MAX_LIGHTS];
</option>
<option match="lit_pp">
centroid in float attenuation[MAX_LIGHTS];
</option>
</option>

in vec4 out_aux;

void main() {
	vec2 centroid_frag_coord = ((out_position.xy/out_position.w) * 0.5) + 0.5;
	float particle_depth = gl_FragCoord.z;
	float scene_depth = texture(depth_buffer, centroid_frag_coord).r;
	// discard if not visible
	if(particle_depth > scene_depth) discard;
	
	vec4 tex_color = texture(particle_tex, tex_coord);
	tex_color.xyz *= color.xyz;
	
	// soft particle blending/rendering
	// linearize depth (necessary, b/c we have a non-linear z-buffer)
	particle_depth = projection_ab.y / (particle_depth - projection_ab.x);
	scene_depth = projection_ab.y / (scene_depth - projection_ab.x);
	const float threshhold = 1.0; // in ws!
	const float inv_threshhold = 1.0/threshhold;
	float dist = scene_depth - particle_depth;
	tex_color.a *= (dist < threshhold ? dist * inv_threshhold : 1.0);
	
	<option match="lit lit_pp">
	vec3 light_color = vec3(0.0);
	for(int i = 0; i < MAX_LIGHTS; i++) {
		light_color += lights.data[i].color.xyz * attenuation[i];
	}
	light_color += vec3(out_aux.w, out_aux.z, sqrt(out_aux.w*out_aux.z));
	tex_color.xyz *= light_color;
	</option>
	
	tex_color.a *= color.a;
	frag_color = vec4(tex_color.xyz * tex_color.a, tex_color.a);
}
	</fragment_shader>

</a2e_shader>