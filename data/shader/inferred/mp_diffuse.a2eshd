<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<includes>global inferred env_map env_probe</includes>
	<options>opaque alpha</options>

	<vertex_shader>
in vec2 texture_coord;

<option match="*env_map">
uniform mat4 local_mview;
uniform mat4 local_scale;
uniform vec3 cam_position;
uniform vec3 model_position;
</option>

out vertex {
	vec2 tex_coord;
	vec3 view_vec;
} out_vertex;

void main() {
	out_vertex.tex_coord = texture_coord;
	out_vertex.view_vec = vec3(0.0);
	<option match="*env_map">
	mat4 transform_mat = local_scale * local_mview;
	vec3 tvertex = vec3(transform_mat * vec4(in_vertex, 1.0));
	out_vertex.view_vec = cam_position - model_position - tvertex;
	</option>
	
	inferred_vs();
	
	<option nomatch="*env_probe">
	gl_Position = mvpm * vec4(in_vertex, 1.0);
	</option>
	<option match="*env_probe">
	gl_Position = vec4(in_vertex, 1.0);
	</option>
}
	</vertex_shader>

	<geometry_shader>
		<header>
<option match="*env_probe">
in vertex {
	vec2 tex_coord;
	vec3 view_vec;
} in_vertex[];
out vertex {
	vec2 tex_coord;
	vec3 view_vec;
} out_vertex;

<option match="opaque alpha">
void env_probe_copy_vars(const in int side, const in int idx) {
	out_vertex.tex_coord = in_vertex[idx].tex_coord;
	out_vertex.view_vec = in_vertex[idx].view_vec;
<option match="alpha">
	out_vertex_alpha.depth = in_vertex_alpha[idx].depth;
	out_vertex_alpha.position = in_vertex_alpha[idx].position;
</option>
}
</option>
</option>
		</header>
	</geometry_shader>

	<fragment_shader>
uniform sampler2D diffuse_texture;
uniform sampler2D specular_texture;
uniform sampler2D reflectance_texture;

in vertex {
	vec2 tex_coord;
	vec3 view_vec;
} in_vertex;

void main() {
	vec4 light_colors[2] = compute_light_colors();
	
	vec4 diff_color = texture(diffuse_texture, in_vertex.tex_coord);
	vec4 spec_color = texture(specular_texture, in_vertex.tex_coord);
	vec4 refl_color = texture(reflectance_texture, in_vertex.tex_coord);
	
	////////////////////////////////////////////////////////////////////////////
	// lighting
	vec3 final_color = compute_diffuse(diff_color.rgb, refl_color.rgb, light_colors[0]);
	final_color += compute_specular(spec_color.rgb, refl_color.rgb, light_colors[1]);
	
	<option match="*env_map">
	final_color += compute_env(in_vertex.view_vec, refl_color.rgb, light_colors[1].rgb);
	</option>
	
	<option match="opaque">
	frag_color = vec4(final_color * diff_color.a, 1.0);
	</option>
	<option match="alpha">
	frag_color = vec4(final_color * diff_color.a, diff_color.a);
	</option>
}
	</fragment_shader>
	
</a2e_shader>