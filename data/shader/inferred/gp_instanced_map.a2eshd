<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<includes>inferred_gbuffer env_probe</includes>
	<options>opaque</options>
	
	<vertex_shader>
uniform vec3 offset;
uniform vec3 cam_position;

<option nomatch="*env_probe">
uniform mat4 mvpm;
</option>

<option nomatch="*dynamic">
#define MAX_BLOCK_COUNT (16*16*4)
layout(std140) uniform blocks {
	uvec4 data[MAX_BLOCK_COUNT];
} block_data;
</option>
<option match="*dynamic">
#define MAX_BLOCK_COUNT (1024) // 64kb / 64 bytes
layout(std140) uniform blocks {
	mat4 mat[MAX_BLOCK_COUNT]; // note: mat[3][3] (lower right corner) contains the block material
} block_data;
</option>

in vec3 in_vertex;
in vec3 normal;
in vec3 binormal;
in vec3 tangent;
in vec2 texture_coord;
<option nomatch="*dynamic">
in uint in_culling;
</option>

out vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
	flat float block_material;
} out_vertex;

void main() {
	<option nomatch="*dynamic">
	int id = int(gl_InstanceID);
	uvec4 data_vec = block_data.data[id >> 2];
	uint data = data_vec[id % 4];
	<option nomatch="*no_cull">
	out_vertex.block_material = (data & in_culling) > 0u ? 0.0 : float(data & 0x7FFFu);
	</option>
	<option match="*no_cull">
	out_vertex.block_material = float(data & 0x7FFFu);
	</option>
	if(out_vertex.block_material == 0.0) {
		gl_Position = vec4(1e7, 1e7, -1.0, 1.0);
		return;
	}
	
	float instance = float(id);
	vec3 block_vertex = vec3(mod(instance, 16.0),
							 floor(instance / 256.0),
							 mod(floor(instance / 16.0), 16));
	block_vertex += in_vertex.xyz;
	block_vertex += offset;
	</option>
	
	<option match="*dynamic">
	// -vec3(0.5), b/c cube center is vec3(0.5)
	mat4 block_mat = block_data.mat[gl_InstanceID];
	vec3 block_vertex = (block_mat * vec4(in_vertex.xyz - vec3(0.5), 1.0)).xyz;
	out_vertex.block_material = block_mat[3][3];
	</option>
	
	out_vertex.tex_coord = texture_coord;
	
	vec3 vview = cam_position - block_vertex;
	
	<option nomatch="*dynamic">
	// flip x coord if specified by the block material
	out_vertex.tex_coord.x = (float(data & 0x8000u) < 1.0 ?
							  out_vertex.tex_coord.x :
							  abs(out_vertex.tex_coord.x - float((id / 256) % 2)));
	out_vertex.tangent = normalize(tangent);
	out_vertex.binormal = normalize(binormal);
	out_vertex.normal = normalize(normal);
	</option>
	
	<option match="*dynamic">
	mat3 block_mat_3x3 = mat3(block_mat);
	out_vertex.tangent = normalize(block_mat_3x3 * tangent);
	out_vertex.binormal = normalize(block_mat_3x3 * binormal);
	out_vertex.normal = normalize(block_mat_3x3 * normal);
	</option>
	
	out_vertex.view_vec = vview * mat3(out_vertex.tangent, out_vertex.binormal, out_vertex.normal);
	
	<option nomatch="*env_probe">
	gl_Position = mvpm * vec4(block_vertex, 1.0);
	</option>
	<option match="*env_probe">
	gl_Position = vec4(block_vertex, 1.0);
	</option>
}
	</vertex_shader>

	<geometry_shader>
		<header>
<option match="*env_probe">
in vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
	flat float block_material;
} in_vertex[];
out vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
	flat float block_material;
} out_vertex;

void env_probe_copy_vars(const in int side, const in int idx) {
	out_vertex.tex_coord = in_vertex[idx].tex_coord;
	out_vertex.view_vec = (side == 0 ? in_vertex[idx].view_vec : -in_vertex[idx].view_vec);
	out_vertex.tangent = in_vertex[idx].tangent;
	out_vertex.binormal = in_vertex[idx].binormal;
	out_vertex.normal = in_vertex[idx].normal;
	out_vertex.block_material = in_vertex[idx].block_material;
}
</option>
		</header>
	</geometry_shader>

	<fragment_shader>
		<header>
out vec4 frag_color;
		</header>

uniform sampler2DArray height_textures;
uniform sampler2DArray normal_textures;
uniform sampler2DArray aux_textures;
//uniform vec2 Nuv;

in vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
	flat float block_material;
} in_vertex;

void main() {
	check_mask_id();
	
	// parallax mapping
	const float parallax = 0.03; // determines the "deepness"
	vec3 view_vec = normalize(in_vertex.view_vec);
	
	float height = 0.0;
	float offset = 0.0;
	vec3 parallax_tex_coord = vec3(in_vertex.tex_coord, in_vertex.block_material - 1.0);
	for(int i = 1; i < 4; i++) {
		height += texture(height_textures, parallax_tex_coord).x;
		offset = parallax * ((2.0 / float(i)) * height - 1.0);
		parallax_tex_coord.xy = in_vertex.tex_coord + offset * view_vec.xy;
	}
	vec3 normal = texture(normal_textures, parallax_tex_coord).xyz * 2.0 - 1.0;
	normal = normalize(mat3(in_vertex.tangent, -in_vertex.binormal, in_vertex.normal) * normal); // it just works (tm)
	
	// read nuv
	vec2 Nuv = texture(aux_textures, parallax_tex_coord).xy * 1536.0;
	
	// write to gbuffer
	write_gbuffer(normal, Nuv);
}
	</fragment_shader>

</a2e_shader>