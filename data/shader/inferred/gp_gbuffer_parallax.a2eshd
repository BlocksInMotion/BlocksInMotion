<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE a2e_shader PUBLIC "-//A2E//DTD a2e_shader 2.0//EN" "a2e_shader.dtd">
<a2e_shader version="2">
	<includes>global inferred_gbuffer env_probe</includes>
	
	<vertex_shader>
uniform mat4 local_mview;
uniform mat4 local_scale;
uniform vec3 cam_position;
uniform vec3 model_position;

<option nomatch="*env_probe">
uniform mat4 mvpm;
</option>

in vec3 normal;
in vec3 binormal;
in vec3 tangent;
in vec2 texture_coord;

out vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
} out_vertex;

void main() {
	mat4 transform_mat = local_scale * local_mview;
	
	out_vertex.tex_coord = texture_coord;
	
	vec3 tvertex = vec3(transform_mat * vec4(in_vertex, 1.0));
	vec3 vview = cam_position - model_position - tvertex;
	
	out_vertex.tangent = normalize(mat3(transform_mat) * tangent);
	out_vertex.binormal = normalize(mat3(transform_mat) * binormal);
	out_vertex.normal = normalize(mat3(transform_mat) * normal);
	out_vertex.view_vec = vview * mat3(out_vertex.tangent, out_vertex.binormal, out_vertex.normal);
	
	<option nomatch="*env_probe">
	gl_Position = mvpm * vec4(in_vertex, 1.0);
	</option>
	<option match="*env_probe">
	gl_Position = vec4(in_vertex, 1.0);
	</option>
}
	</vertex_shader>

	<geometry_shader>
		<header>
<option match="*env_probe">
in vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
} in_vertex[];
out vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
} out_vertex;

void env_probe_copy_vars(const in int side, const in int idx) {
	out_vertex.tex_coord = in_vertex[idx].tex_coord;
	out_vertex.view_vec = (side == 0 ? in_vertex[idx].view_vec : -in_vertex[idx].view_vec);
	out_vertex.tangent = in_vertex[idx].tangent;
	out_vertex.binormal = in_vertex[idx].binormal;
	out_vertex.normal = in_vertex[idx].normal;
}
</option>
		</header>
	</geometry_shader>
	
	<fragment_shader>
uniform sampler2D height_texture;
uniform sampler2D normal_texture;
<option nomatch="*aux_texture">
uniform vec2 Nuv;
</option>
<option match="*aux_texture">
uniform sampler2D aux_texture;
</option>

in vertex {
	vec2 tex_coord;
	vec3 view_vec;
	vec3 tangent;
	vec3 binormal;
	vec3 normal;
} in_vertex;

void main() {
	check_mask_id();

	//
	vec3 view_vec = normalize(in_vertex.view_vec);
	
	// determines the "deepness"
	const float parallax = 0.03;
	
	// compute parallax tex coord
	float height = 0.0;
	float offset = 0.0;
	vec2 parallax_tex_coord = in_vertex.tex_coord;
	for(int i = 1; i < 4; i++) {
		height += texture(height_texture, parallax_tex_coord).x;
		offset = parallax * ((2.0 / float(i)) * height - 1.0);
		parallax_tex_coord = in_vertex.tex_coord + offset * view_vec.xy;
	}
	vec3 normal = texture(normal_texture, parallax_tex_coord).xyz * 2.0 - 1.0;
	normal = normalize(mat3(in_vertex.tangent, -in_vertex.binormal, in_vertex.normal) * normal); // it just works (tm)
	
	<option match="*aux_texture">
	vec2 Nuv = texture(aux_texture, parallax_tex_coord).xy * 1536.0;
	</option>
	
	// write to gbuffer
	write_gbuffer(normal, Nuv);
}
	</fragment_shader>

</a2e_shader>